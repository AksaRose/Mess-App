// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;
import 'package:mess_app/env.dart';

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for macos - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static FirebaseOptions get web => FirebaseOptions(
        apiKey: Env.webApiKey,
        appId: Env.webAppId,
        messagingSenderId: Env.webMessagingSenderId,
        projectId: Env.webProjectId,
        authDomain: Env.webAuthDomain,
        databaseURL: Env.webDatabaseUrl,
        storageBucket: Env.webStorageBucket,
        measurementId: Env.webMeasurementId,
      );

  static FirebaseOptions get android => FirebaseOptions(
        apiKey: Env.androidApiKey,
        appId: Env.androidAppId,
        messagingSenderId: Env.androidMessagingSenderId,
        projectId: Env.androidProjectId,
        databaseURL: Env.androidDatabaseUrl,
        storageBucket: Env.androidStorageBucket,
      );

  static FirebaseOptions get ios => FirebaseOptions(
        apiKey: Env.iosApiKey,
        appId: Env.iosAppId,
        messagingSenderId: Env.iosMessagingSenderId,
        projectId: Env.iosProjectId,
        databaseURL: Env.iosDatabaseUrl,
        storageBucket: Env.iosStorageBucket,
        iosBundleId: Env.iosBundleId,
      );
}
